{"version":3,"file":"admin.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEAA,wEAAA,CAAqB,mBAArB,EAA0C,YAAM;EAC9CA,4EAAA,CACO,mBADP,EAEGM,kBAFH,CAGI;IACEC,IAAI,EAAE,qBADR;IAEEC,KAAK,EAAER,wEAAA,CAAqB,uDAArB,CAFT;IAGEW,UAAU,EAAE;EAHd,CAHJ,EAQI,OARJ,EASI,EATJ,EAWGC,eAXH,CAWmB;IACfJ,KAAK,EAAER,wEAAA,CAAqB,0DAArB,CADQ;IAEfa,IAAI,EAAE,MAFS;IAGfC,OAAO,EAAE;EAHM,CAXnB,EAgBGF,eAhBH,CAgBmB;IACfJ,KAAK,EAAER,wEAAA,CAAqB,yDAArB,CADQ;IAEfa,IAAI,EAAE,MAFS;IAGfC,OAAO,EAAE;EAHM,CAhBnB;;EAsBA,IAAId,wEAAA,CAAqB,iBAArB,CAAJ,EAA6C;IAC3C;IACAC,wEAAA,GAAyCC,4EAAzC,CAF2C,CAG3C;;IACAD,wEAAA,CAAuC,gBAAvC;EACD;AACF,CA7BD;;;;;;;;;;;;;;;;;;;ACJA;CAGA;AACA;AACA;AACA;AACA;AAEA;;AACA,IAAMgB,QAAQ,GAAGhB,wEAAjB,EAEA;;AACA,iEAAe,UAACiB,OAAD,EAAa;EAC1B;EACA,IAAMC,OAAO,GAAGF,QAAQ,CAACC,OAAD,CAAxB;EAEAC,OAAO,CAACC,KAAR,GAAgBpB,yEAAA,CAAqB,sCAArB,CAAhB,CAJ0B,CAM1B;;EACA,OAAOmB,OAAP;AACD,CARD;;;;;;;;;;;ACbA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D","sources":["webpack://@ianm/follow-users/./src/admin/index.js","webpack://@ianm/follow-users/./src/common/helpers/followingPageOptions.js","webpack://@ianm/follow-users/external assign \"flarum.extensions['fof-follow-tags']\"","webpack://@ianm/follow-users/external root \"flarum.core.compat['admin/app']\"","webpack://@ianm/follow-users/external root \"flarum.core.compat['common/app']\"","webpack://@ianm/follow-users/webpack/bootstrap","webpack://@ianm/follow-users/webpack/runtime/compat get default export","webpack://@ianm/follow-users/webpack/runtime/define property getters","webpack://@ianm/follow-users/webpack/runtime/hasOwnProperty shorthand","webpack://@ianm/follow-users/webpack/runtime/make namespace object","webpack://@ianm/follow-users/./admin.js"],"sourcesContent":["import app from 'flarum/admin/app';\nimport * as follow_tags from '@fof-follow-tags';\nimport followingPageOptions from '../common/helpers/followingPageOptions';\n\napp.initializers.add('ianm-follow-users', () => {\n  app.extensionData\n    .for('ianm-follow-users')\n    .registerPermission(\n      {\n        icon: 'fas fa-user-friends',\n        label: app.translator.trans('ianm-follow-users.admin.permissions.be_followed_label'),\n        permission: 'user.beFollowed',\n      },\n      'reply',\n      95\n    )\n    .registerSetting({\n      label: app.translator.trans('ianm-follow-users.admin.settings.button-on-profile-label'),\n      type: 'bool',\n      setting: 'ianm-follow-users.button-on-profile',\n    })\n    .registerSetting({\n      label: app.translator.trans('ianm-follow-users.admin.settings.stats-on-profile-label'),\n      type: 'bool',\n      setting: 'ianm-follow-users.stats-on-profile',\n    });\n\n  if (app.initializers.has('fof/follow-tags')) {\n    // Replace the original function with our customized version\n    follow_tags.utils.followingPageOptions = followingPageOptions;\n    // Execute the customized helper to cache the returned list of options\n    follow_tags.utils.followingPageOptions('admin.settings');\n  }\n});\n","import app from 'flarum/common/app';\nimport * as follow_tags from '@fof-follow-tags';\n\n// We need to add options to the list of options available on the following page\n// As `follow_tags.utils.followingPageOptions` is a function, we cannot really\n// extend or override it with the Flarum helpers.\n// As the result of this function is cached after its first execution,\n// we can use the below version and execute this one to cache the desired options.\n\n// Save the reference to the original function, as it will be overriden\nconst original = follow_tags.utils.followingPageOptions;\n\n// Customized version of the helper with addition options for followed users\nexport default (section) => {\n  // Get the original options\n  const options = original(section);\n\n  options.users = app.translator.trans('ianm-follow-users.lib.following_link');\n\n  // Return the mutated options list\n  return options;\n};\n","module.exports = flarum.extensions['fof-follow-tags'];","module.exports = flarum.core.compat['admin/app'];","module.exports = flarum.core.compat['common/app'];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export * from './src/admin';\n"],"names":["app","follow_tags","followingPageOptions","initializers","add","extensionData","registerPermission","icon","label","translator","trans","permission","registerSetting","type","setting","has","utils","original","section","options","users"],"sourceRoot":""}